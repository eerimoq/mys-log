@enum(u8)
class Level:
    Off = 255
    Error = 40
    Warning = 30
    Info = 20
    Debug = 10

@enum
class _State:

    Start
    OpenBrace
    CloseBrace

class Logger:
    """A logger.

    """

    _name: string
    _level: Level

    def __init__(self, name: string, level: Level = Level.Info):
        self._name = name
        self._level = level

    def set_level(self, level: Level):
        """Set the logging level.

        """

        self._level = level

    def is_enabled_for(self, level: Level) -> bool:
        """Returns True is given level is enabled, otherwise False.

        """

        return level >= self._level

    def error(self, format_string: comptime[string], *args):
        self._log(format_string, Level.Error, "ERROR", args)

    def warning(self, format_string: comptime[string], *args):
        self._log(format_string, Level.Warning, "WARNING", args)

    def info(self, format_string: comptime[string], *args):
        self._log(format_string, Level.Info, "INFO", args)

    def debug(self, format_string: comptime[string], *args):
        self._log(format_string, Level.Debug, "DEBUG", args)

    def _log(self,
             format_string: comptime[string],
             level: Level,
             level_string: string,
             *args):
        if not self.is_enabled_for(level):
            return

        start_index: comptime = 0
        state: comptime = _State.Start
        next_arg: comptime = 0

        print(f"{self._name} {level_string}", end="")

        for i, ch in enumerate(format_string):
            match state:
                case _State.Start:
                    match ch:
                        case '{':
                            if start_index < i:
                                print(format_string[start_index:i], end="")

                            state = _State.OpenBrace

                        case '}':
                            if start_index < i:
                                print(format_string[start_index:i], end="")

                            state = _State.CloseBrace

                case _State.OpenBrace:
                    match ch:
                        case '{':
                            state = _State.Start
                            start_index = i

                        case '}':
                            print(args[next_arg], end="")
                            next_arg += 1
                            state = _State.Start
                            start_index = i + 1

                case _State.CloseBrace:
                    match ch:
                        case '}':
                            state = _State.Start
                            start_index = i

                        case _:
                            raise ComptimeError("single '}' encountered in format string")

        if len(args) != next_arg:
            raise ComptimeError("unused arguments")

        if state != _State.Start:
            raise ComptimeError(f"incomplete format string: {format_string}")

        if start_index < len(format_string):
            print(format_string[start_index:])
