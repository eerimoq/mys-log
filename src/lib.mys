@enum(u8)
class Level:
    Debug = 10
    Info = 20
    Warning = 30
    Error = 40
    Off = 255

@trait
class Handler:
    """Log entry output handler.

    """

    def log(self, message: string):
        pass

class StdoutHandler(Handler):
    """Writes log messages to standard output.

    """

    def log(self, message: string):
        print(message)

class Logger:
    """A logger.

    Writes log messages to standard ouput by default.

    """

    _name: string
    _level: Level
    _handler: Handler

    def __init__(self,
                 name: string,
                 # ToDo: Should be Level.Info, but 'mys doc' fails
                 level: Level = Level(20),
                 handler: Handler = StdoutHandler()):
        self._name = name
        self._level = level
        self._handler = handler

    def set_level(self, level: Level):
        """Set the logging level.

        """

        self._level = level

    def is_enabled_for(self, level: Level) -> bool:
        """Returns True is given level is enabled, otherwise False.

        """

        return level >= self._level

    def error(self, message: string):
        """Log given error message.

        """

        self._log(message, Level.Error, "ERROR")

    def warning(self, message: string):
        """Log given warning message.

        """

        self._log(message, Level.Warning, "WARNING")

    def info(self, message: string):
        """Log given info message.

        """

        self._log(message, Level.Info, "INFO")

    def debug(self, message: string):
        """Log given debug message.

        """

        self._log(message, Level.Debug, "DEBUG")

    def _log(self, message: string, level: Level, level_string: string):
        if not self.is_enabled_for(level):
            return

        self._handler.log(f"{self._name} {level_string} {message}")

@test
def test_default_handler():
    logger = Logger("my-logger")

    logger.error(f"Message: {1 + 1}")
    logger.warning(f"Message: {2 + 2}")
    logger.info(f"Message: {3 + 3}")
    logger.debug(f"Message: {4 + 4}")

class _BufferHandler(Handler):
    entries: [string]

    def log(self, message: string):
        self.entries.append(message)

@test
def test_buffer_handler():
    handler = _BufferHandler([])
    logger = Logger("my-logger", Level.Info, handler)

    logger.info("Message 1")
    logger.debug("Message 2")
    logger.info("Message 3")

    assert handler.entries == ["my-logger INFO Message 1",
                               "my-logger INFO Message 3"]
